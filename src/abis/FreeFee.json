{
  "address": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "usage",
          "type": "uint256"
        }
      ],
      "name": "consume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "estimateFreeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "estimateTotalLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLeft",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "usage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFreeFee.UsageInfo",
          "name": "ui",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "estimateUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onAfterBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userUsage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b5e8a9fc192eed6a2a3352b6e231dab90ae7724e2dcdd643a1129ffbedd7f1f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xA51c1fc2f0D1a1b8494Ed1FE312d7C3a78Ed91C0",
    "transactionIndex": 0,
    "gasUsed": "629602",
    "logsBloom": "0x
    "blockHash": "0x35b6aa45c6d707a57745388274e0e7fe4e39e673220892d13e548780e777e2e6",
    "transactionHash": "0x5b5e8a9fc192eed6a2a3352b6e231dab90ae7724e2dcdd643a1129ffbedd7f1f",
    "logs": [],
    "blockNumber": 13,
    "cumulativeGasUsed": "629602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "140b184ea212973259cc7f2e35ce1b61",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usage\",\"type\":\"uint256\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"estimateFreeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"estimateTotalLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IFreeFee.UsageInfo\",\"name\":\"ui\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"estimateUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAfterBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"consume(address,uint256)\":{\"details\":\"Consume user usage, it only can be called by router.\",\"params\":{\"usage\":\"Usage amount\",\"user\":\"Transaction sender\"}},\"estimateFreeFee(address,uint256)\":{\"details\":\"Estimate user daily free fee left.\",\"params\":{\"timestamp\":\"Current timestamp\",\"user\":\"User address\"}},\"estimateTotalLeft(uint256)\":{\"details\":\"Estimate total daily free fee left.\",\"params\":{\"timestamp\":\"Current timestamp\"}},\"estimateUsage((uint256,uint256),uint256)\":{\"details\":\"Estimate user daily free fee usage.\",\"params\":{\"timestamp\":\"Current timestamp\",\"ui\":\"User usage information\"}},\"onAfterBlock()\":{\"details\":\"After block callback, it only can be called by router,     it will update `globalTimestamp` if the time interval exceeds `freeFeeRecoverInterval`\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/FreeFee.sol\":\"FreeFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/FreeFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFreeFee.sol\\\";\\nimport \\\"./Only.sol\\\";\\n\\ncontract FreeFee is ReentrancyGuard, Only, IFreeFee {\\n    using SafeMath for uint256;\\n\\n    // free fee usage info of user\\n    mapping(address => UsageInfo) public override userUsage;\\n\\n    // total usage of free fee in the past 24 hours\\n    uint256 public override totalUsage;\\n    // global timestamp, update every 24 hours\\n    uint256 public override globalTimestamp;\\n\\n    constructor(IConfig config) public Only(config) {}\\n\\n    /**\\n     * @dev Estimate total daily free fee left.\\n     * @param timestamp        Current timestamp\\n     */\\n    function estimateTotalLeft(uint256 timestamp) public view override returns (uint256 totalLeft) {\\n        uint256 _totalUsage = totalUsage;\\n        if (globalTimestamp.add(config.freeFeeRecoverInterval()) < timestamp) {\\n            _totalUsage = 0;\\n        }\\n        uint256 dailyFreeFee = config.dailyFreeFee();\\n        totalLeft = dailyFreeFee > _totalUsage ? dailyFreeFee - _totalUsage : 0;\\n    }\\n\\n    /**\\n     * @dev Estimate user daily free fee usage.\\n     * @param ui                User usage information\\n     * @param timestamp         Current timestamp\\n     */\\n    function estimateUsage(UsageInfo memory ui, uint256 timestamp) public view override returns (uint256) {\\n        uint256 _globalTimestamp = globalTimestamp;\\n        if (_globalTimestamp.add(config.freeFeeRecoverInterval()) < timestamp) {\\n            _globalTimestamp = timestamp;\\n        }\\n        return ui.timestamp >= _globalTimestamp ? ui.usage : 0;\\n    }\\n\\n    /**\\n     * @dev Estimate user daily free fee left.\\n     * @param user              User address\\n     * @param timestamp         Current timestamp\\n     */\\n    function estimateFreeFee(address user, uint256 timestamp) external view override returns (uint256) {\\n        uint256 totalLeft = estimateTotalLeft(timestamp);\\n        if (totalLeft == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _userUsage = estimateUsage(userUsage[user], timestamp);\\n        uint256 userFreeFeeLimit = config.userFreeFeeLimit();\\n        uint256 userLeft = userFreeFeeLimit > _userUsage ? userFreeFeeLimit - _userUsage : 0;\\n        return userLeft > totalLeft ? totalLeft : userLeft;\\n    }\\n\\n    /**\\n     * @dev Consume user usage, it only can be called by router.\\n     * @param user              Transaction sender\\n     * @param usage             Usage amount\\n     */\\n    function consume(address user, uint256 usage) external override nonReentrant onlyRouter {\\n        require(usage > 0, \\\"FreeFee: invalid usage\\\");\\n        UsageInfo storage ui = userUsage[user];\\n        if (ui.timestamp < globalTimestamp) {\\n            ui.usage = usage;\\n        } else {\\n            ui.usage = ui.usage.add(usage);\\n        }\\n        ui.timestamp = block.timestamp;\\n        totalUsage = totalUsage.add(usage);\\n    }\\n\\n    /**\\n     * @dev After block callback, it only can be called by router,\\n     *      it will update `globalTimestamp` if the time interval exceeds `freeFeeRecoverInterval`\\n     */\\n    function onAfterBlock() external override nonReentrant onlyRouter {\\n        if (globalTimestamp.add(config.freeFeeRecoverInterval()) < block.timestamp) {\\n            totalUsage = 0;\\n            globalTimestamp = block.timestamp;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0211844e6a2a44bd9d769a8e30973cfc88642a1fd6caf1441601debe99fa9cdf\"},\"src/Only.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"./interfaces/IOnly.sol\\\";\\n\\nabstract contract Only is IOnly {\\n    IConfig public override config;\\n\\n    modifier onlyStakeManager() {\\n        require(msg.sender == config.stakeManager(), \\\"Only: only stake manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == config.router(), \\\"Only: only router\\\");\\n        _;\\n    }\\n\\n    constructor(IConfig _config) public {\\n        config = _config;\\n    }\\n}\\n\",\"keccak256\":\"0x6334ad4d511fd73468895b026c14825d00367996d37f525aa37cd77250025ff8\"},\"src/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev see {Config}\\n */\\ninterface IConfig {\\n    function stakeManager() external view returns (address);\\n\\n    function systemCaller() external view returns (address);\\n\\n    function unstakePool() external view returns (address);\\n\\n    function validatorRewardPool() external view returns (address);\\n\\n    function fee() external view returns (address);\\n\\n    function freeFee() external view returns (address);\\n\\n    function feePool() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function contractFee() external view returns (address);\\n\\n    function unstakeDelay() external view returns (uint256);\\n\\n    function withdrawDelay() external view returns (uint256);\\n\\n    function dailyFee() external view returns (uint256);\\n\\n    function dailyFreeFee() external view returns (uint256);\\n\\n    function userFreeFeeLimit() external view returns (uint256);\\n\\n    function feeRecoverInterval() external view returns (uint256);\\n\\n    function freeFeeRecoverInterval() external view returns (uint256);\\n\\n    function feePoolLiquidateInterval() external view returns (uint256);\\n\\n    function minIndexVotingPower() external view returns (uint256);\\n\\n    function getFactorByReason(uint8 reason) external view returns (uint8);\\n\\n    function setCommissionRateInterval() external view returns (uint256);\\n\\n    function minerRewardFactor() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa9ae74ba454e5c3b9d0847d251b3cd90171cbfb106df2462f84d73a5dbcac053\"},\"src/interfaces/IFreeFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IOnly.sol\\\";\\n\\n/**\\n * @dev see {FreeFee}\\n */\\ninterface IFreeFee is IOnly {\\n    struct UsageInfo {\\n        uint256 usage;\\n        uint256 timestamp;\\n    }\\n\\n    function userUsage(address) external view returns (uint256, uint256);\\n\\n    function totalUsage() external view returns (uint256);\\n\\n    function globalTimestamp() external view returns (uint256);\\n\\n    function estimateTotalLeft(uint256 timestamp) external view returns (uint256);\\n\\n    function estimateUsage(UsageInfo calldata ui, uint256 timestamp) external view returns (uint256);\\n\\n    function estimateFreeFee(address user, uint256 timestamp) external view returns (uint256);\\n\\n    function consume(address user, uint256 usage) external;\\n\\n    function onAfterBlock() external;\\n}\\n\",\"keccak256\":\"0x7ad3494b1798b2769b927110b812ab2f91dbe1532b5304371d9c2d472ea0a447\"},\"src/interfaces/IOnly.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IConfig.sol\\\";\\n\\ninterface IOnly {\\n    function config() external view returns (IConfig);\\n}\\n\",\"keccak256\":\"0x091ba53f009ccd75749a6d1453ef05e9071607991e1e7a85ba3f4b6d97e514fb\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a2c380380610a2c83398101604081905261002f91610059565b6001600081905580546001600160a01b0319166001600160a01b0392909216919091179055610087565b60006020828403121561006a578081fd5b81516001600160a01b0381168114610080578182fd5b9392505050565b610996806100966000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639facc9e4116100665780639facc9e4146100f3578063b0527b9714610106578063c18402fa14610119578063cefc7deb1461013a578063ecbe40c51461014257610093565b8063224b5c721461009857806379502c55146100ad5780638ebb7ce2146100cb5780639ce5fdc3146100e0575b600080fd5b6100ab6100a636600461079b565b61014a565b005b6100b56102b1565b6040516100c29190610854565b60405180910390f35b6100d36102c0565b6040516100c29190610931565b6100d36100ee36600461079b565b6102c6565b6100d3610101366004610824565b6103dd565b6100d36101143660046107c6565b610521565b61012c610127366004610763565b6105da565b6040516100c292919061093a565b6100ab6105f3565b6100d3610731565b600260005414156101765760405162461bcd60e51b815260040161016d906108cf565b60405180910390fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101f8919081019061077f565b6001600160a01b0316336001600160a01b0316146102285760405162461bcd60e51b815260040161016d90610906565b600081116102485760405162461bcd60e51b815260040161016d9061089f565b6001600160a01b0382166000908152600260205260409020600454600182015410156102765781815561028b565b8054610288908363ffffffff61073716565b81555b4260018201556003546102a4908363ffffffff61073716565b6003555050600160005550565b6001546001600160a01b031681565b60035481565b6000806102d2836103dd565b9050806102e35760009150506103d7565b6001600160a01b0384166000908152600260209081526040808320815180830190925280548252600101549181019190915261031f9085610521565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166344a621666040518163ffffffff1660e01b815260040160206040518083038186803b15801561037157600080fd5b505afa158015610385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a9919081019061083c565b905060008282116103bb5760006103bf565b8282035b90508381116103ce57806103d0565b835b9450505050505b92915050565b60008060035490508261047e600160009054906101000a90046001600160a01b03166001600160a01b031663929867b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061046f919081019061083c565b6004549063ffffffff61073716565b1015610488575060005b60015460408051633f66e06960e11b815290516000926001600160a01b031691637ecdc0d2916004808301926020929190829003018186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610505919081019061083c565b9050818111610515576000610519565b8181035b949350505050565b60048054600154604080516312530cf760e31b8152905160009486936105b5936001600160a01b039091169263929867b892828101926020929190829003018186803b15801561057057600080fd5b505afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a8919081019061083c565b839063ffffffff61073716565b10156105be5750815b80846020015110156105d1576000610519565b50509051919050565b6002602052600090815260409020805460019091015482565b600260005414156106165760405162461bcd60e51b815260040161016d906108cf565b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610698919081019061077f565b6001600160a01b0316336001600160a01b0316146106c85760405162461bcd60e51b815260040161016d90610906565b4261071a600160009054906101000a90046001600160a01b03166001600160a01b031663929867b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b101561072a576000600355426004555b6001600055565b60045481565b60008282018381101561075c5760405162461bcd60e51b815260040161016d90610868565b9392505050565b600060208284031215610774578081fd5b813561075c81610948565b600060208284031215610790578081fd5b815161075c81610948565b600080604083850312156107ad578081fd5b82356107b881610948565b946020939093013593505050565b60008082840360608112156107d9578283fd5b60408112156107e6578283fd5b506040516040810181811067ffffffffffffffff82111715610806578384fd5b60409081528435825260208086013590830152909593013593505050565b600060208284031215610835578081fd5b5035919050565b60006020828403121561084d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260169082015275467265654665653a20696e76616c696420757361676560501b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526011908201527027b7363c9d1037b7363c903937baba32b960791b604082015260600190565b90815260200190565b918252602082015260400190565b6001600160a01b038116811461095d57600080fd5b5056fea264697066735822122079f023a805a139685372fa381ff2db670f93036f3062ad2bb0d6bbb789d7431864736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80639facc9e4116100665780639facc9e4146100f3578063b0527b9714610106578063c18402fa14610119578063cefc7deb1461013a578063ecbe40c51461014257610093565b8063224b5c721461009857806379502c55146100ad5780638ebb7ce2146100cb5780639ce5fdc3146100e0575b600080fd5b6100ab6100a636600461079b565b61014a565b005b6100b56102b1565b6040516100c29190610854565b60405180910390f35b6100d36102c0565b6040516100c29190610931565b6100d36100ee36600461079b565b6102c6565b6100d3610101366004610824565b6103dd565b6100d36101143660046107c6565b610521565b61012c610127366004610763565b6105da565b6040516100c292919061093a565b6100ab6105f3565b6100d3610731565b600260005414156101765760405162461bcd60e51b815260040161016d906108cf565b60405180910390fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b1580156101c057600080fd5b505afa1580156101d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506101f8919081019061077f565b6001600160a01b0316336001600160a01b0316146102285760405162461bcd60e51b815260040161016d90610906565b600081116102485760405162461bcd60e51b815260040161016d9061089f565b6001600160a01b0382166000908152600260205260409020600454600182015410156102765781815561028b565b8054610288908363ffffffff61073716565b81555b4260018201556003546102a4908363ffffffff61073716565b6003555050600160005550565b6001546001600160a01b031681565b60035481565b6000806102d2836103dd565b9050806102e35760009150506103d7565b6001600160a01b0384166000908152600260209081526040808320815180830190925280548252600101549181019190915261031f9085610521565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166344a621666040518163ffffffff1660e01b815260040160206040518083038186803b15801561037157600080fd5b505afa158015610385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103a9919081019061083c565b905060008282116103bb5760006103bf565b8282035b90508381116103ce57806103d0565b835b9450505050505b92915050565b60008060035490508261047e600160009054906101000a90046001600160a01b03166001600160a01b031663929867b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061046f919081019061083c565b6004549063ffffffff61073716565b1015610488575060005b60015460408051633f66e06960e11b815290516000926001600160a01b031691637ecdc0d2916004808301926020929190829003018186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610505919081019061083c565b9050818111610515576000610519565b8181035b949350505050565b60048054600154604080516312530cf760e31b8152905160009486936105b5936001600160a01b039091169263929867b892828101926020929190829003018186803b15801561057057600080fd5b505afa158015610584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105a8919081019061083c565b839063ffffffff61073716565b10156105be5750815b80846020015110156105d1576000610519565b50509051919050565b6002602052600090815260409020805460019091015482565b600260005414156106165760405162461bcd60e51b815260040161016d906108cf565b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561066057600080fd5b505afa158015610674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610698919081019061077f565b6001600160a01b0316336001600160a01b0316146106c85760405162461bcd60e51b815260040161016d90610906565b4261071a600160009054906101000a90046001600160a01b03166001600160a01b031663929867b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b101561072a576000600355426004555b6001600055565b60045481565b60008282018381101561075c5760405162461bcd60e51b815260040161016d90610868565b9392505050565b600060208284031215610774578081fd5b813561075c81610948565b600060208284031215610790578081fd5b815161075c81610948565b600080604083850312156107ad578081fd5b82356107b881610948565b946020939093013593505050565b60008082840360608112156107d9578283fd5b60408112156107e6578283fd5b506040516040810181811067ffffffffffffffff82111715610806578384fd5b60409081528435825260208086013590830152909593013593505050565b600060208284031215610835578081fd5b5035919050565b60006020828403121561084d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260169082015275467265654665653a20696e76616c696420757361676560501b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526011908201527027b7363c9d1037b7363c903937baba32b960791b604082015260600190565b90815260200190565b918252602082015260400190565b6001600160a01b038116811461095d57600080fd5b5056fea264697066735822122079f023a805a139685372fa381ff2db670f93036f3062ad2bb0d6bbb789d7431864736f6c63430006020033",
  "devdoc": {
    "methods": {
      "consume(address,uint256)": {
        "details": "Consume user usage, it only can be called by router.",
        "params": {
          "usage": "Usage amount",
          "user": "Transaction sender"
        }
      },
      "estimateFreeFee(address,uint256)": {
        "details": "Estimate user daily free fee left.",
        "params": {
          "timestamp": "Current timestamp",
          "user": "User address"
        }
      },
      "estimateTotalLeft(uint256)": {
        "details": "Estimate total daily free fee left.",
        "params": {
          "timestamp": "Current timestamp"
        }
      },
      "estimateUsage((uint256,uint256),uint256)": {
        "details": "Estimate user daily free fee usage.",
        "params": {
          "timestamp": "Current timestamp",
          "ui": "User usage information"
        }
      },
      "onAfterBlock()": {
        "details": "After block callback, it only can be called by router,     it will update `globalTimestamp` if the time interval exceeds `freeFeeRecoverInterval`"
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1404,
        "contract": "src/FreeFee.sol:FreeFee",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3757,
        "contract": "src/FreeFee.sol:FreeFee",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IConfig)6296"
      },
      {
        "astId": 3501,
        "contract": "src/FreeFee.sol:FreeFee",
        "label": "userUsage",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UsageInfo)6532_storage)"
      },
      {
        "astId": 3504,
        "contract": "src/FreeFee.sol:FreeFee",
        "label": "totalUsage",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3507,
        "contract": "src/FreeFee.sol:FreeFee",
        "label": "globalTimestamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IConfig)6296": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UsageInfo)6532_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IFreeFee.UsageInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UsageInfo)6532_storage"
      },
      "t_struct(UsageInfo)6532_storage": {
        "encoding": "inplace",
        "label": "struct IFreeFee.UsageInfo",
        "members": [
          {
            "astId": 6529,
            "contract": "src/FreeFee.sol:FreeFee",
            "label": "usage",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6531,
            "contract": "src/FreeFee.sol:FreeFee",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}