{
  "address": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accTxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isTxFee",
          "type": "bool"
        }
      ],
      "name": "accumulate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        }
      ],
      "name": "earn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onAssignBlockReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validatorsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a1432aa4857e7cdee9b553a4fbf32b96bdea804b75e7aa7f71eac01cffa4f22",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x610178dA211FEF7D417bC0e6FeD39F05609AD788",
    "transactionIndex": 0,
    "gasUsed": "711504",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x335e15b73353e8b01515fc78e24d50792ced29bd4931ef67ad472564297d17ba",
    "transactionHash": "0x5a1432aa4857e7cdee9b553a4fbf32b96bdea804b75e7aa7f71eac01cffa4f22",
    "logs": [],
    "blockNumber": 11,
    "cumulativeGasUsed": "711504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "140b184ea212973259cc7f2e35ce1b61",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accTxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isTxFee\",\"type\":\"bool\"}],\"name\":\"accumulate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAssignBlockReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"accumulate(bool)\":{\"details\":\"Add reward to fee pool.\",\"params\":{\"isTxFee\":\"Is transaction fee\"}},\"earn(address,uint256)\":{\"details\":\"Increase miner's share.\",\"params\":{\"earned\":\"Miner earned share.\",\"validator\":\"Miner address\"}},\"onAssignBlockReward()\":{\"details\":\"Assign block reward callback, it only can be called by router.\"},\"validatorsLength()\":{\"details\":\"Get validators length.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/FeePool.sol\":\"FeePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/FeePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IFeePool.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./Only.sol\\\";\\n\\ncontract FeePool is ReentrancyGuard, Only, IFeePool {\\n    using SafeMath for uint256;\\n\\n    // miner share,\\n    // it will be cleared when global timestamp is updated\\n    mapping(address => uint256) public override sharesOf;\\n\\n    // total share\\n    uint256 public override totalShares;\\n    // accumulative transaction fee,\\n    // it will increase when a user pays transaction fee through his balance\\n    uint256 public override accTxFee;\\n    // global timestamp, update every 24 hours\\n    uint256 public override globalTimestamp;\\n\\n    // addresses of all validators who have produced blocks,\\n    // it will be cleared when global timestamp is updated\\n    address[] public override validators;\\n\\n    constructor(IConfig config) public Only(config) {}\\n\\n    /**\\n     * @dev Get validators length.\\n     */\\n    function validatorsLength() external view override returns (uint256) {\\n        return validators.length;\\n    }\\n\\n    /**\\n     * @dev Increase miner's share.\\n     * @param validator         Miner address\\n     * @param earned            Miner earned share.\\n     */\\n    function earn(address validator, uint256 earned) external override nonReentrant onlyRouter {\\n        uint256 shares = sharesOf[validator];\\n        if (shares == 0) {\\n            validators.push(validator);\\n        }\\n        sharesOf[validator] = shares.add(earned);\\n        totalShares = totalShares.add(earned);\\n    }\\n\\n    /**\\n     * @dev Add reward to fee pool.\\n     * @param isTxFee           Is transaction fee\\n     */\\n    function accumulate(bool isTxFee) external payable override nonReentrant onlyRouter {\\n        if (isTxFee) {\\n            accTxFee = accTxFee.add(msg.value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Assign block reward callback, it only can be called by router.\\n     */\\n    function onAssignBlockReward() external override nonReentrant onlyRouter {\\n        if (globalTimestamp.add(config.feePoolLiquidateInterval()) < block.timestamp) {\\n            uint256 balance = address(this).balance;\\n            uint256 _totalShares = totalShares;\\n            if (validators.length != 0 && _totalShares != 0 && balance != 0) {\\n                IStakeManager sm = IStakeManager(config.stakeManager());\\n                for (uint256 i = validators.length.sub(1); ; i--) {\\n                    address validator = validators[i];\\n                    uint256 reward = i == 0 ? address(this).balance : sharesOf[validator].mul(balance) / _totalShares;\\n                    if (reward > 0) {\\n                        sm.reward{ value: reward }(validator);\\n                    }\\n                    // clear storage\\n                    delete sharesOf[validator];\\n                    validators.pop();\\n\\n                    if (i == 0) {\\n                        break;\\n                    }\\n                }\\n                accTxFee = 0;\\n            }\\n            totalShares = 0;\\n            globalTimestamp = block.timestamp;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbc8ccd70cc7b07421192fc88780cd205301f85d25bc56e79d42e00fb9798aa66\"},\"src/Only.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"./interfaces/IOnly.sol\\\";\\n\\nabstract contract Only is IOnly {\\n    IConfig public override config;\\n\\n    modifier onlyStakeManager() {\\n        require(msg.sender == config.stakeManager(), \\\"Only: only stake manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == config.router(), \\\"Only: only router\\\");\\n        _;\\n    }\\n\\n    constructor(IConfig _config) public {\\n        config = _config;\\n    }\\n}\\n\",\"keccak256\":\"0x6334ad4d511fd73468895b026c14825d00367996d37f525aa37cd77250025ff8\"},\"src/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev see {Config}\\n */\\ninterface IConfig {\\n    function stakeManager() external view returns (address);\\n\\n    function systemCaller() external view returns (address);\\n\\n    function unstakePool() external view returns (address);\\n\\n    function validatorRewardPool() external view returns (address);\\n\\n    function fee() external view returns (address);\\n\\n    function freeFee() external view returns (address);\\n\\n    function feePool() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function contractFee() external view returns (address);\\n\\n    function unstakeDelay() external view returns (uint256);\\n\\n    function withdrawDelay() external view returns (uint256);\\n\\n    function dailyFee() external view returns (uint256);\\n\\n    function dailyFreeFee() external view returns (uint256);\\n\\n    function userFreeFeeLimit() external view returns (uint256);\\n\\n    function feeRecoverInterval() external view returns (uint256);\\n\\n    function freeFeeRecoverInterval() external view returns (uint256);\\n\\n    function feePoolLiquidateInterval() external view returns (uint256);\\n\\n    function minIndexVotingPower() external view returns (uint256);\\n\\n    function getFactorByReason(uint8 reason) external view returns (uint8);\\n\\n    function setCommissionRateInterval() external view returns (uint256);\\n\\n    function minerRewardFactor() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa9ae74ba454e5c3b9d0847d251b3cd90171cbfb106df2462f84d73a5dbcac053\"},\"src/interfaces/IFeePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IOnly.sol\\\";\\n\\n/**\\n * @dev see {FeePool}\\n */\\ninterface IFeePool is IOnly {\\n    function sharesOf(address) external view returns (uint256);\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function accTxFee() external view returns (uint256);\\n\\n    function globalTimestamp() external view returns (uint256);\\n\\n    function validators(uint256 index) external view returns (address);\\n\\n    function validatorsLength() external view returns (uint256);\\n\\n    function earn(address validator, uint256 earned) external;\\n\\n    function accumulate(bool isTxFee) external payable;\\n\\n    function onAssignBlockReward() external;\\n}\\n\",\"keccak256\":\"0xde5306d090f54f9ecb7fa0f587f37e3ca2e1aa456b02481a9e61eeb7868ca843\"},\"src/interfaces/IOnly.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IConfig.sol\\\";\\n\\ninterface IOnly {\\n    function config() external view returns (IConfig);\\n}\\n\",\"keccak256\":\"0x091ba53f009ccd75749a6d1453ef05e9071607991e1e7a85ba3f4b6d97e514fb\"},\"src/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IOnly.sol\\\";\\n\\n/**\\n * @dev `Unstake` records the information of each unstake request.\\n */\\nstruct Unstake {\\n    // validator address\\n    address validator;\\n    // GXC receiver address\\n    address payable to;\\n    // number of shares\\n    uint256 unstakeShares;\\n    // release timestamp\\n    uint256 timestamp;\\n}\\n\\n/**\\n * @dev `Validator` records the information of each validator.\\n */\\nstruct Validator {\\n    // validator unique id\\n    uint256 id;\\n    // commission share contract address\\n    address commissionShare;\\n    // commission rate\\n    uint256 commissionRate;\\n    // latest commission rate update timestamp\\n    uint256 updateTimestamp;\\n}\\n\\n/**\\n * @dev `ActiveValidator` records the information of each active validator,\\n *      it will be updated by system in `StakeManager.afterBlock`.\\n */\\nstruct ActiveValidator {\\n    // validator address\\n    address validator;\\n    // proposer priority\\n    int256 priority;\\n}\\n\\n/**\\n * @dev see {StakeManager}\\n */\\ninterface IStakeManager is IOnly {\\n    function validatorId() external view returns (uint256);\\n\\n    function validators(address validator)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function unstakeId() external view returns (uint256);\\n\\n    function unstakeQueue(uint256 id)\\n        external\\n        view\\n        returns (\\n            address,\\n            address payable,\\n            uint256,\\n            uint256\\n        );\\n\\n    function activeValidators(uint256 index) external view returns (address, int256);\\n\\n    function indexedValidatorsLength() external view returns (uint256);\\n\\n    function indexedValidatorsExists(uint256 id) external view returns (bool);\\n\\n    function indexedValidatorsByIndex(uint256 index) external view returns (address);\\n\\n    function indexedValidatorsById(uint256 id) external view returns (address);\\n\\n    function getVotingPowerByIndex(uint256 index) external view returns (uint256);\\n\\n    function getVotingPowerById(uint256 index) external view returns (uint256);\\n\\n    function getVotingPowerByAddress(address validator) external view returns (uint256);\\n\\n    function activeValidatorsLength() external view returns (uint256);\\n\\n    function estimateMinStakeAmount(address validator) external view returns (uint256);\\n\\n    function estimateStakeAmount(address validator, uint256 shares) external view returns (uint256);\\n\\n    function estimateMinUnstakeShares(address validator) external view returns (uint256);\\n\\n    function estimateUnstakeShares(address validator, uint256 amount) external view returns (uint256);\\n\\n    function estimateUnstakeAmount(address validator, uint256 shares) external view returns (uint256);\\n\\n    function stake(address validator, address to) external payable returns (uint256);\\n\\n    function startUnstake(\\n        address validator,\\n        address payable to,\\n        uint256 shares\\n    ) external returns (uint256);\\n\\n    function startClaim(address payable to, uint256 amount) external returns (uint256);\\n\\n    function setCommissionRate(uint256 rate) external;\\n\\n    function unstake(uint256 id) external returns (uint256);\\n\\n    function removeIndexedValidator(address validator) external;\\n\\n    function addIndexedValidator(address validator) external;\\n\\n    function reward(address validator) external payable;\\n\\n    function slash(address validator, uint8 reason) external returns (uint256);\\n\\n    function onAfterBlock(address[] calldata acValidators, int256[] calldata priorities) external;\\n}\\n\",\"keccak256\":\"0x2254199cc4495a3be2ddebea08f25d0cded762b794b991c266c5901eb3f0eca0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b7f380380610b7f8339818101604052602081101561003357600080fd5b50516001600081905580546001600160a01b039092166001600160a01b0319909216919091179055610b158061006a6000396000f3fe6080604052600436106100915760003560e01c8063ce3f35c111610059578063ce3f35c114610168578063ecbe40c514610187578063f1105a7e1461019c578063f5eb42dc146101b1578063f976c33c146101e457610091565b80631067af441461009657806335aa2e44146100ad5780633a98ef39146100f357806379502c551461011a578063b02bf4b91461012f575b600080fd5b3480156100a257600080fd5b506100ab6101f9565b005b3480156100b957600080fd5b506100d7600480360360208110156100d057600080fd5b50356105b5565b604080516001600160a01b039092168252519081900360200190f35b3480156100ff57600080fd5b506101086105dc565b60408051918252519081900360200190f35b34801561012657600080fd5b506100d76105e2565b34801561013b57600080fd5b506100ab6004803603604081101561015257600080fd5b506001600160a01b0381351690602001356105f1565b6100ab6004803603602081101561017e57600080fd5b503515156107c2565b34801561019357600080fd5b50610108610905565b3480156101a857600080fd5b5061010861090b565b3480156101bd57600080fd5b50610108600480360360208110156101d457600080fd5b50356001600160a01b0316610911565b3480156101f057600080fd5b50610108610923565b60026000541415610251576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561029b57600080fd5b505afa1580156102af573d6000803e3d6000fd5b505050506040513d60208110156102c557600080fd5b50516001600160a01b03163314610317576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b426103a4600160009054906101000a90046001600160a01b03166001600160a01b031663575b76da6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d602081101561039357600080fd5b50516005549063ffffffff61092916565b10156105ae57600354600654479190158015906103c057508015155b80156103cb57508115155b156105a25760015460408051637542ff9560e01b815290516000926001600160a01b031691637542ff95916004808301926020929190829003018186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d602081101561043f57600080fd5b505160065490915060009061045b90600163ffffffff61098c16565b90505b60006006828154811061046d57fe5b60009182526020822001546001600160a01b0316915082156104c1576001600160a01b03821660009081526002602052604090205485906104b4908863ffffffff6109ce16565b816104bb57fe5b046104c3565b475b9050801561053d57836001600160a01b0316636353586b82846040518363ffffffff1660e01b815260040180826001600160a01b03166001600160a01b031681526020019150506000604051808303818588803b15801561052357600080fd5b505af1158015610537573d6000803e3d6000fd5b50505050505b6001600160a01b038216600090815260026020526040812055600680548061056157fe5b600082815260209020810160001990810180546001600160a01b03191690550190558261058f57505061059a565b50506000190161045e565b505060006004555b50506000600355426005555b6001600055565b600681815481106105c257fe5b6000918252602090912001546001600160a01b0316905081565b60035481565b6001546001600160a01b031681565b60026000541415610649576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561069357600080fd5b505afa1580156106a7573d6000803e3d6000fd5b505050506040513d60208110156106bd57600080fd5b50516001600160a01b0316331461070f576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b6001600160a01b0382166000908152600260205260409020548061077957600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0385161790555b610789818363ffffffff61092916565b6001600160a01b0384166000908152600260205260409020556003546107b5908363ffffffff61092916565b6003555050600160005550565b6002600054141561081a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d602081101561088e57600080fd5b50516001600160a01b031633146108e0576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b80156108fd576004546108f9903463ffffffff61092916565b6004555b506001600055565b60055481565b60065490565b60026020526000908152604090205481565b60045481565b600082820183811015610983576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600061098383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a27565b6000826109dd57506000610986565b828202828482816109ea57fe5b04146109835760405162461bcd60e51b8152600401808060200182810382526021815260200180610abf6021913960400191505060405180910390fd5b60008184841115610ab65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a7b578181015183820152602001610a63565b50505050905090810190601f168015610aa85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220fbff1044bcffd45102f09d7b276989e0cb2b5a5db786e6c9ec75931dad47e35c64736f6c63430006020033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063ce3f35c111610059578063ce3f35c114610168578063ecbe40c514610187578063f1105a7e1461019c578063f5eb42dc146101b1578063f976c33c146101e457610091565b80631067af441461009657806335aa2e44146100ad5780633a98ef39146100f357806379502c551461011a578063b02bf4b91461012f575b600080fd5b3480156100a257600080fd5b506100ab6101f9565b005b3480156100b957600080fd5b506100d7600480360360208110156100d057600080fd5b50356105b5565b604080516001600160a01b039092168252519081900360200190f35b3480156100ff57600080fd5b506101086105dc565b60408051918252519081900360200190f35b34801561012657600080fd5b506100d76105e2565b34801561013b57600080fd5b506100ab6004803603604081101561015257600080fd5b506001600160a01b0381351690602001356105f1565b6100ab6004803603602081101561017e57600080fd5b503515156107c2565b34801561019357600080fd5b50610108610905565b3480156101a857600080fd5b5061010861090b565b3480156101bd57600080fd5b50610108600480360360208110156101d457600080fd5b50356001600160a01b0316610911565b3480156101f057600080fd5b50610108610923565b60026000541415610251576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561029b57600080fd5b505afa1580156102af573d6000803e3d6000fd5b505050506040513d60208110156102c557600080fd5b50516001600160a01b03163314610317576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b426103a4600160009054906101000a90046001600160a01b03166001600160a01b031663575b76da6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036957600080fd5b505afa15801561037d573d6000803e3d6000fd5b505050506040513d602081101561039357600080fd5b50516005549063ffffffff61092916565b10156105ae57600354600654479190158015906103c057508015155b80156103cb57508115155b156105a25760015460408051637542ff9560e01b815290516000926001600160a01b031691637542ff95916004808301926020929190829003018186803b15801561041557600080fd5b505afa158015610429573d6000803e3d6000fd5b505050506040513d602081101561043f57600080fd5b505160065490915060009061045b90600163ffffffff61098c16565b90505b60006006828154811061046d57fe5b60009182526020822001546001600160a01b0316915082156104c1576001600160a01b03821660009081526002602052604090205485906104b4908863ffffffff6109ce16565b816104bb57fe5b046104c3565b475b9050801561053d57836001600160a01b0316636353586b82846040518363ffffffff1660e01b815260040180826001600160a01b03166001600160a01b031681526020019150506000604051808303818588803b15801561052357600080fd5b505af1158015610537573d6000803e3d6000fd5b50505050505b6001600160a01b038216600090815260026020526040812055600680548061056157fe5b600082815260209020810160001990810180546001600160a01b03191690550190558261058f57505061059a565b50506000190161045e565b505060006004555b50506000600355426005555b6001600055565b600681815481106105c257fe5b6000918252602090912001546001600160a01b0316905081565b60035481565b6001546001600160a01b031681565b60026000541415610649576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561069357600080fd5b505afa1580156106a7573d6000803e3d6000fd5b505050506040513d60208110156106bd57600080fd5b50516001600160a01b0316331461070f576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b6001600160a01b0382166000908152600260205260409020548061077957600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b0385161790555b610789818363ffffffff61092916565b6001600160a01b0384166000908152600260205260409020556003546107b5908363ffffffff61092916565b6003555050600160005550565b6002600054141561081a576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154604080516303e21fa960e61b815290516001600160a01b039092169163f887ea4091600480820192602092909190829003018186803b15801561086457600080fd5b505afa158015610878573d6000803e3d6000fd5b505050506040513d602081101561088e57600080fd5b50516001600160a01b031633146108e0576040805162461bcd60e51b815260206004820152601160248201527027b7363c9d1037b7363c903937baba32b960791b604482015290519081900360640190fd5b80156108fd576004546108f9903463ffffffff61092916565b6004555b506001600055565b60055481565b60065490565b60026020526000908152604090205481565b60045481565b600082820183811015610983576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b600061098383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a27565b6000826109dd57506000610986565b828202828482816109ea57fe5b04146109835760405162461bcd60e51b8152600401808060200182810382526021815260200180610abf6021913960400191505060405180910390fd5b60008184841115610ab65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a7b578181015183820152602001610a63565b50505050905090810190601f168015610aa85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220fbff1044bcffd45102f09d7b276989e0cb2b5a5db786e6c9ec75931dad47e35c64736f6c63430006020033",
  "devdoc": {
    "methods": {
      "accumulate(bool)": {
        "details": "Add reward to fee pool.",
        "params": {
          "isTxFee": "Is transaction fee"
        }
      },
      "earn(address,uint256)": {
        "details": "Increase miner's share.",
        "params": {
          "earned": "Miner earned share.",
          "validator": "Miner address"
        }
      },
      "onAssignBlockReward()": {
        "details": "Assign block reward callback, it only can be called by router."
      },
      "validatorsLength()": {
        "details": "Get validators length."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1404,
        "contract": "src/FeePool.sol:FeePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3757,
        "contract": "src/FeePool.sol:FeePool",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IConfig)6296"
      },
      {
        "astId": 3059,
        "contract": "src/FeePool.sol:FeePool",
        "label": "sharesOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3062,
        "contract": "src/FeePool.sol:FeePool",
        "label": "totalShares",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3065,
        "contract": "src/FeePool.sol:FeePool",
        "label": "accTxFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3068,
        "contract": "src/FeePool.sol:FeePool",
        "label": "globalTimestamp",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3072,
        "contract": "src/FeePool.sol:FeePool",
        "label": "validators",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IConfig)6296": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}