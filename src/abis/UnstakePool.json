{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConfig",
          "name": "config",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "internalType": "contract IConfig",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "factor",
          "type": "uint8"
        }
      ],
      "name": "slash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalSupplyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bc9874c31c91cd5830adc0cbda234fc15b4f1dabddc7e0c34c65d9e039ddc38",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "733771",
    "logsBloom": "0x
    "blockHash": "0x2f592f21125bfdac1af93e3f5b8f70d74805b1334d2bcb9bb892828e469099b3",
    "transactionHash": "0x8bc9874c31c91cd5830adc0cbda234fc15b4f1dabddc7e0c34c65d9e039ddc38",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "733771",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "140b184ea212973259cc7f2e35ce1b61",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"config\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"factor\",\"type\":\"uint8\"}],\"name\":\"slash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSupplyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"deposit(address)\":{\"details\":\"Deposit GXC to `UnstakePool`, only can be called by stake manager,     this will be called when user starts unstake.\",\"params\":{\"validator\":\"Validator address.\"}},\"slash(address,uint8)\":{\"details\":\"Slash validator and transfer the slashed amount to `address(0)`.\",\"params\":{\"factor\":\"Slash factor.\",\"validator\":\"Validator address.\"}},\"withdraw(address,uint256,address)\":{\"details\":\"Withdraw GXC and burn shares, only can be called by stake manager,     this will be called when unstake timeout.\",\"params\":{\"shares\":\"Number of shares.\",\"to\":\"GXC receiver address(this value is set when the user starts unstake).\",\"validator\":\"Validator address.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/UnstakePool.sol\":\"UnstakePool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\"},\"src/Only.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./interfaces/IConfig.sol\\\";\\nimport \\\"./interfaces/IOnly.sol\\\";\\n\\nabstract contract Only is IOnly {\\n    IConfig public override config;\\n\\n    modifier onlyStakeManager() {\\n        require(msg.sender == config.stakeManager(), \\\"Only: only stake manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == config.router(), \\\"Only: only router\\\");\\n        _;\\n    }\\n\\n    constructor(IConfig _config) public {\\n        config = _config;\\n    }\\n}\\n\",\"keccak256\":\"0x6334ad4d511fd73468895b026c14825d00367996d37f525aa37cd77250025ff8\"},\"src/UnstakePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IUnstakePool.sol\\\";\\nimport \\\"./Only.sol\\\";\\n\\ncontract UnstakePool is ReentrancyGuard, Only, IUnstakePool {\\n    using SafeMath for uint256;\\n\\n    // balance of each validators\\n    mapping(address => uint256) public override balanceOf;\\n    // total supply of each validators\\n    mapping(address => uint256) public override totalSupplyOf;\\n\\n    constructor(IConfig config) public Only(config) {}\\n\\n    /**\\n     * @dev Deposit GXC to `UnstakePool`, only can be called by stake manager,\\n     *      this will be called when user starts unstake.\\n     * @param validator     Validator address.\\n     */\\n    function deposit(address validator) external payable override nonReentrant onlyStakeManager returns (uint256 shares) {\\n        uint256 balance = balanceOf[validator];\\n        uint256 totalSupply = totalSupplyOf[validator];\\n        if (totalSupply == 0) {\\n            // if there is a balance before the stake, allocate all the balance to the first stake user\\n            shares = balance.add(msg.value);\\n        } else {\\n            require(balance > 0, \\\"UnstakePool: insufficient validator balance\\\");\\n            shares = msg.value.mul(totalSupply).div(balance);\\n        }\\n        require(shares > 0, \\\"UnstakePool: insufficient shares\\\");\\n        balanceOf[validator] = balance.add(msg.value);\\n        totalSupplyOf[validator] = totalSupply.add(shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw GXC and burn shares, only can be called by stake manager,\\n     *      this will be called when unstake timeout.\\n     * @param validator     Validator address.\\n     * @param shares        Number of shares.\\n     * @param to            GXC receiver address(this value is set when the user starts unstake).\\n     */\\n    function withdraw(\\n        address validator,\\n        uint256 shares,\\n        address payable to\\n    ) external override nonReentrant onlyStakeManager returns (uint256 amount) {\\n        uint256 balance = balanceOf[validator];\\n        uint256 totalSupply = totalSupplyOf[validator];\\n        if (totalSupply == 0) {\\n            amount = 0;\\n        } else {\\n            amount = shares.mul(balance).div(totalSupply);\\n        }\\n        totalSupplyOf[validator] = totalSupply.sub(shares, \\\"UnstakePool: insufficient total supply\\\");\\n        if (amount > 0) {\\n            balanceOf[validator] = balance.sub(amount);\\n            to.transfer(amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Slash validator and transfer the slashed amount to `address(0)`.\\n     * @param validator     Validator address.\\n     * @param factor        Slash factor.\\n     */\\n    function slash(address validator, uint8 factor) external override nonReentrant onlyStakeManager returns (uint256 amount) {\\n        require(factor <= 100, \\\"UnstakePool: invalid factor\\\");\\n        uint256 balance = balanceOf[validator];\\n        amount = balance.mul(factor).div(100);\\n        if (amount > 0) {\\n            balanceOf[validator] = balance.sub(amount);\\n            address(0).transfer(amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x39845c85a489a9d16392955796dc8f3fdb8eefc72ca2d25aa6b61de95fa040f6\"},\"src/interfaces/IConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev see {Config}\\n */\\ninterface IConfig {\\n    function stakeManager() external view returns (address);\\n\\n    function systemCaller() external view returns (address);\\n\\n    function unstakePool() external view returns (address);\\n\\n    function validatorRewardPool() external view returns (address);\\n\\n    function fee() external view returns (address);\\n\\n    function freeFee() external view returns (address);\\n\\n    function feePool() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function contractFee() external view returns (address);\\n\\n    function unstakeDelay() external view returns (uint256);\\n\\n    function withdrawDelay() external view returns (uint256);\\n\\n    function dailyFee() external view returns (uint256);\\n\\n    function dailyFreeFee() external view returns (uint256);\\n\\n    function userFreeFeeLimit() external view returns (uint256);\\n\\n    function feeRecoverInterval() external view returns (uint256);\\n\\n    function freeFeeRecoverInterval() external view returns (uint256);\\n\\n    function feePoolLiquidateInterval() external view returns (uint256);\\n\\n    function minIndexVotingPower() external view returns (uint256);\\n\\n    function getFactorByReason(uint8 reason) external view returns (uint8);\\n\\n    function setCommissionRateInterval() external view returns (uint256);\\n\\n    function minerRewardFactor() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa9ae74ba454e5c3b9d0847d251b3cd90171cbfb106df2462f84d73a5dbcac053\"},\"src/interfaces/IOnly.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IConfig.sol\\\";\\n\\ninterface IOnly {\\n    function config() external view returns (IConfig);\\n}\\n\",\"keccak256\":\"0x091ba53f009ccd75749a6d1453ef05e9071607991e1e7a85ba3f4b6d97e514fb\"},\"src/interfaces/IUnstakePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IOnly.sol\\\";\\n\\n/**\\n * @dev see {UnstakePool}\\n */\\ninterface IUnstakePool is IOnly {\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function totalSupplyOf(address addr) external view returns (uint256);\\n\\n    function deposit(address validator) external payable returns (uint256);\\n\\n    function withdraw(\\n        address validator,\\n        uint256 shares,\\n        address payable to\\n    ) external returns (uint256);\\n\\n    function slash(address validator, uint8 factor) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2bcee80e808ad75d246a3710d68dcbac41cc33472856ec0261849ab35f467c2a\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610be6380380610be68339818101604052602081101561003357600080fd5b50516001600081905580546001600160a01b039092166001600160a01b0319909216919091179055610b7c8061006a6000396000f3fe6080604052600436106100555760003560e01c806330b409a41461005a57806369328dec146100a857806370a08231146100eb57806379502c551461011e578063cf9530d01461014f578063f340fa0114610182575b600080fd5b34801561006657600080fd5b506100966004803603604081101561007d57600080fd5b5080356001600160a01b0316906020013560ff166101a8565b60408051918252519081900360200190f35b3480156100b457600080fd5b50610096600480360360608110156100cb57600080fd5b506001600160a01b038135811691602081013591604090910135166103d1565b3480156100f757600080fd5b506100966004803603602081101561010e57600080fd5b50356001600160a01b03166105f6565b34801561012a57600080fd5b50610133610608565b604080516001600160a01b039092168252519081900360200190f35b34801561015b57600080fd5b506100966004803603602081101561017257600080fd5b50356001600160a01b0316610617565b6100966004803603602081101561019857600080fd5b50356001600160a01b0316610629565b600060026000541415610202576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b15801561024c57600080fd5b505afa158015610260573d6000803e3d6000fd5b505050506040513d602081101561027657600080fd5b50516001600160a01b031633146102cf576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b60648260ff161115610328576040805162461bcd60e51b815260206004820152601b60248201527f556e7374616b65506f6f6c3a20696e76616c696420666163746f720000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526002602052604090205461036560646103598360ff871663ffffffff61089c16565b9063ffffffff6108fe16565b915081156103c55761037d818363ffffffff61094016565b6001600160a01b03851660009081526002602052604080822092909255905183156108fc0290849083818181858288f193505050501580156103c3573d6000803e3d6000fd5b505b50600160005592915050565b60006002600054141561042b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b15801561047557600080fd5b505afa158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b50516001600160a01b031633146104f8576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b6001600160a01b0384166000908152600260209081526040808320546003909252909120548061052b5760009250610542565b61053f81610359878563ffffffff61089c16565b92505b61056d85604051806060016040528060268152602001610b216026913983919063ffffffff61097e16565b6001600160a01b03871660009081526003602052604090205582156105e85761059c828463ffffffff61094016565b6001600160a01b038088166000908152600260205260408082209390935591519086169185156108fc02918691818181858888f193505050501580156105e6573d6000803e3d6000fd5b505b505060016000559392505050565b60026020526000908152604090205481565b6001546001600160a01b031681565b60036020526000908152604090205481565b600060026000541415610683576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d60208110156106f757600080fd5b50516001600160a01b03163314610750576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b6001600160a01b038216600090815260026020908152604080832054600390925290912054806107915761078a823463ffffffff610a1516565b92506107e7565b600082116107d05760405162461bcd60e51b815260040180806020018281038252602b815260200180610ad5602b913960400191505060405180910390fd5b6107e482610359348463ffffffff61089c16565b92505b6000831161083c576040805162461bcd60e51b815260206004820181905260248201527f556e7374616b65506f6f6c3a20696e73756666696369656e7420736861726573604482015290519081900360640190fd5b61084c823463ffffffff610a1516565b6001600160a01b038516600090815260026020526040902055610875818463ffffffff610a1516565b6001600160a01b039094166000908152600360205260408120949094555050600190915590565b6000826108ab575060006108f8565b828202828482816108b857fe5b04146108f55760405162461bcd60e51b8152600401808060200182810382526021815260200180610b006021913960400191505060405180910390fd5b90505b92915050565b60006108f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a6f565b60006108f583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152505b60008184841115610a0d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109d25781810151838201526020016109ba565b50505050905090810190601f1680156109ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108f5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008183610abe5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109d25781810151838201526020016109ba565b506000838581610aca57fe5b049594505050505056fe556e7374616b65506f6f6c3a20696e73756666696369656e742076616c696461746f722062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e7374616b65506f6f6c3a20696e73756666696369656e7420746f74616c20737570706c79a2646970667358221220dcf5abeaa038f5dbf2ff41f7a39b8dfe5c3295f5afebbc1a5e33ed3212c3481c64736f6c63430006020033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806330b409a41461005a57806369328dec146100a857806370a08231146100eb57806379502c551461011e578063cf9530d01461014f578063f340fa0114610182575b600080fd5b34801561006657600080fd5b506100966004803603604081101561007d57600080fd5b5080356001600160a01b0316906020013560ff166101a8565b60408051918252519081900360200190f35b3480156100b457600080fd5b50610096600480360360608110156100cb57600080fd5b506001600160a01b038135811691602081013591604090910135166103d1565b3480156100f757600080fd5b506100966004803603602081101561010e57600080fd5b50356001600160a01b03166105f6565b34801561012a57600080fd5b50610133610608565b604080516001600160a01b039092168252519081900360200190f35b34801561015b57600080fd5b506100966004803603602081101561017257600080fd5b50356001600160a01b0316610617565b6100966004803603602081101561019857600080fd5b50356001600160a01b0316610629565b600060026000541415610202576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b15801561024c57600080fd5b505afa158015610260573d6000803e3d6000fd5b505050506040513d602081101561027657600080fd5b50516001600160a01b031633146102cf576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b60648260ff161115610328576040805162461bcd60e51b815260206004820152601b60248201527f556e7374616b65506f6f6c3a20696e76616c696420666163746f720000000000604482015290519081900360640190fd5b6001600160a01b03831660009081526002602052604090205461036560646103598360ff871663ffffffff61089c16565b9063ffffffff6108fe16565b915081156103c55761037d818363ffffffff61094016565b6001600160a01b03851660009081526002602052604080822092909255905183156108fc0290849083818181858288f193505050501580156103c3573d6000803e3d6000fd5b505b50600160005592915050565b60006002600054141561042b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b15801561047557600080fd5b505afa158015610489573d6000803e3d6000fd5b505050506040513d602081101561049f57600080fd5b50516001600160a01b031633146104f8576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b6001600160a01b0384166000908152600260209081526040808320546003909252909120548061052b5760009250610542565b61053f81610359878563ffffffff61089c16565b92505b61056d85604051806060016040528060268152602001610b216026913983919063ffffffff61097e16565b6001600160a01b03871660009081526003602052604090205582156105e85761059c828463ffffffff61094016565b6001600160a01b038088166000908152600260205260408082209390935591519086169185156108fc02918691818181858888f193505050501580156105e6573d6000803e3d6000fd5b505b505060016000559392505050565b60026020526000908152604090205481565b6001546001600160a01b031681565b60036020526000908152604090205481565b600060026000541415610683576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005560015460408051637542ff9560e01b815290516001600160a01b0390921691637542ff9591600480820192602092909190829003018186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d60208110156106f757600080fd5b50516001600160a01b03163314610750576040805162461bcd60e51b815260206004820152601860248201527727b7363c9d1037b7363c9039ba30b5b29036b0b730b3b2b960411b604482015290519081900360640190fd5b6001600160a01b038216600090815260026020908152604080832054600390925290912054806107915761078a823463ffffffff610a1516565b92506107e7565b600082116107d05760405162461bcd60e51b815260040180806020018281038252602b815260200180610ad5602b913960400191505060405180910390fd5b6107e482610359348463ffffffff61089c16565b92505b6000831161083c576040805162461bcd60e51b815260206004820181905260248201527f556e7374616b65506f6f6c3a20696e73756666696369656e7420736861726573604482015290519081900360640190fd5b61084c823463ffffffff610a1516565b6001600160a01b038516600090815260026020526040902055610875818463ffffffff610a1516565b6001600160a01b039094166000908152600360205260408120949094555050600190915590565b6000826108ab575060006108f8565b828202828482816108b857fe5b04146108f55760405162461bcd60e51b8152600401808060200182810382526021815260200180610b006021913960400191505060405180910390fd5b90505b92915050565b60006108f583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a6f565b60006108f583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152505b60008184841115610a0d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156109d25781810151838201526020016109ba565b50505050905090810190601f1680156109ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000828201838110156108f5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008183610abe5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156109d25781810151838201526020016109ba565b506000838581610aca57fe5b049594505050505056fe556e7374616b65506f6f6c3a20696e73756666696369656e742076616c696461746f722062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77556e7374616b65506f6f6c3a20696e73756666696369656e7420746f74616c20737570706c79a2646970667358221220dcf5abeaa038f5dbf2ff41f7a39b8dfe5c3295f5afebbc1a5e33ed3212c3481c64736f6c63430006020033",
  "devdoc": {
    "methods": {
      "deposit(address)": {
        "details": "Deposit GXC to `UnstakePool`, only can be called by stake manager,     this will be called when user starts unstake.",
        "params": {
          "validator": "Validator address."
        }
      },
      "slash(address,uint8)": {
        "details": "Slash validator and transfer the slashed amount to `address(0)`.",
        "params": {
          "factor": "Slash factor.",
          "validator": "Validator address."
        }
      },
      "withdraw(address,uint256,address)": {
        "details": "Withdraw GXC and burn shares, only can be called by stake manager,     this will be called when unstake timeout.",
        "params": {
          "shares": "Number of shares.",
          "to": "GXC receiver address(this value is set when the user starts unstake).",
          "validator": "Validator address."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1404,
        "contract": "src/UnstakePool.sol:UnstakePool",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3757,
        "contract": "src/UnstakePool.sol:UnstakePool",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IConfig)6296"
      },
      {
        "astId": 5748,
        "contract": "src/UnstakePool.sol:UnstakePool",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5753,
        "contract": "src/UnstakePool.sol:UnstakePool",
        "label": "totalSupplyOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IConfig)6296": {
        "encoding": "inplace",
        "label": "contract IConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}