{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "child",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "generateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "codeHash",
          "type": "bytes32"
        }
      ],
      "name": "generateAddress2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "bool[]",
          "name": "flags",
          "type": "bool[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "deployCodeHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Create2Info[]",
          "name": "infos",
          "type": "tuple[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90a0d9d174f8261ac5566502ce999be80dc73e6bc6509a949d3cfce8d839bfbe",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "650451",
    "logsBloom": "0x
    "blockHash": "0x36d546f8cb30b2ff6770b6782f6e260d8d087f042229397cda1cc36f003388e1",
    "transactionHash": "0x90a0d9d174f8261ac5566502ce999be80dc73e6bc6509a949d3cfce8d839bfbe",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "650451",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "140b184ea212973259cc7f2e35ce1b61",
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"generateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"codeHash\",\"type\":\"bytes32\"}],\"name\":\"generateAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"deployCodeHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct Create2Info[]\",\"name\":\"infos\",\"type\":\"tuple[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"generateAddress(address,uint256)\":{\"details\":\"Generate contract address.\",\"params\":{\"from\":\"Creator address\",\"nonce\":\"Creator nonce\"}},\"generateAddress2(address,bytes32,bytes32)\":{\"details\":\"Generate contract address(create2).\",\"params\":{\"codeHash\":\"Deploy code hash, notice: this is not the same as the account code hash\",\"from\":\"Creator address\",\"salt\":\"Salt\"}},\"register(address,bool[],uint256[],(bytes32,bytes32)[])\":{\"details\":\"Register the contract creator.\",\"params\":{\"flags\":\"A list of flags,                     if the flag is true, it means `create` and load a nonce from nonces,                     otherwise it means `create2` and load a `Create2Info` from infos\",\"infos\":\"A list of `Create2Info`\",\"nonces\":\"A list of nonces\",\"parent\":\"Root creator address\"}},\"setFee(address,uint256)\":{\"details\":\"Set contract fee.     The contract fee can be set only when the sender is the creator of the contract.\",\"params\":{\"contractAddress\":\"Target contract address\",\"fee\":\"Contract fee\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/ContractFee.sol\":\"ContractFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/ContractFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IContractFee.sol\\\";\\nimport \\\"./libraries/Util.sol\\\";\\n\\ncontract ContractFee is IContractFee {\\n    // a mapping that records all contract fee settings\\n    mapping(address => uint256) public override feeOf;\\n    // a mapping that records each contract creator\\n    mapping(address => address) public override creatorOf;\\n\\n    /**\\n     * @dev Registration event, emit when someone registers their contract.\\n     * @param parent        Creator\\n     * @param child         Contract address\\n     */\\n    event Register(address parent, address child);\\n\\n    // calculate the byte size of an unsigned integer\\n    // exmaple:\\n    //      [0, 255]      - 1\\n    //      [256 - 65535] - 2\\n    //      ...\\n    function bytesSize(uint256 i) private pure returns (uint8 size) {\\n        size = 1;\\n        uint256 threshold = 0x100;\\n        while (i > threshold - 1) {\\n            threshold = threshold << 8;\\n            size++;\\n        }\\n    }\\n\\n    // convert uint256 to bytes based byte size\\n    function toBytes(uint256 x, uint8 a) private pure returns (bytes memory b) {\\n        b = new bytes(a);\\n        for (uint256 i = 0; i < a; i++) {\\n            b[i] = bytes1(uint8(x / (2**(8 * (a - 1 - i)))));\\n        }\\n    }\\n\\n    // simple rlp encoding logic, only prepared for [address, nonce]\\n    function rlpEncode(address from, uint256 nonce) private pure returns (bytes memory) {\\n        // if the nonce is less than 0x7f, the rlp encodeing of the nonce will be itself\\n        if (nonce <= 0x7f) {\\n            if (nonce == 0) {\\n                // if the nonce is zero, it should be `null`\\n                return abi.encodePacked(hex\\\"d694\\\", from, hex\\\"80\\\");\\n            } else {\\n                return abi.encodePacked(hex\\\"d694\\\", from, bytes1(uint8(nonce)));\\n            }\\n        } else {\\n            // calculate byte size of nonce\\n            uint8 size = bytesSize(nonce);\\n            /**\\n             * @dev https://eth.wiki/fundamentals/rlp\\n             *\\n             *      Rlp encoding result will be:\\n             *      (0xC0 + listSize) + (0x80 + addressSize) + address + (0x80 + nonceSize) + nonce\\n             *\\n             *          0xC0: list prefix\\n             *          listSize: the size of list, listSize = addressSize + nonceSize + 2,\\n             *                its maximum value is 55\\n             *          0x80: bytes prefix, bytes' maximum value is 55\\n             *          addressSize: the size of address, it is 20\\n             *          nonceSize: the size of nonce, its maximum value is 32\\n             *\\n             *      The maximum available value of listSize is 55 - 20 - 2 = 33,\\n             *      And the maximum value of nonceSize is 32,\\n             *      So, it will never overflow\\n             *\\n             *      notice:\\n             *          0xD6 = 0xC0 + 0d20 + 0d2\\n             *          0x94 = 0x80 + 0d20\\n             */\\n            return abi.encodePacked(bytes1(0xd6 + size), hex\\\"94\\\", from, bytes1(0x80 + size), toBytes(nonce, size));\\n        }\\n    }\\n\\n    /**\\n     * @dev Generate contract address.\\n     * @param from          Creator address\\n     * @param nonce         Creator nonce\\n     */\\n    function generateAddress(address from, uint256 nonce) public pure override returns (address) {\\n        return address(uint256(keccak256(rlpEncode(from, nonce))));\\n    }\\n\\n    /**\\n     * @dev Generate contract address(create2).\\n     * @param from          Creator address\\n     * @param salt          Salt\\n     * @param codeHash      Deploy code hash, notice: this is not the same as the account code hash\\n     */\\n    function generateAddress2(\\n        address from,\\n        bytes32 salt,\\n        bytes32 codeHash\\n    ) public pure override returns (address) {\\n        return address(uint256(keccak256(abi.encodePacked(hex\\\"ff\\\", from, salt, codeHash))));\\n    }\\n\\n    // generate contract address and ensure that the contract exists\\n    function _create(address from, uint256 nonce) private view returns (address contractAddress) {\\n        contractAddress = generateAddress(from, nonce);\\n        require(Util.isContract(contractAddress), \\\"ContractFee: creation contract does not exist\\\");\\n    }\\n\\n    // generate contract address and ensure that the contract exists(create2)\\n    function _create2(\\n        address from,\\n        bytes32 salt,\\n        bytes32 deployCodeHash\\n    ) private view returns (address contractAddress) {\\n        contractAddress = generateAddress2(from, salt, deployCodeHash);\\n        require(Util.isContract(contractAddress), \\\"ContractFee: creation contract does not exist\\\");\\n    }\\n\\n    // try to register the contract creator,\\n    // if the creator already exists, make sure that the creator is the same as the parent,\\n    // if it doesn't exist, add it to the map and emit an event\\n    function _register(address parent, address child) private returns (address) {\\n        address _parent = creatorOf[child];\\n        if (_parent == address(0)) {\\n            creatorOf[child] = parent;\\n            emit Register(parent, child);\\n        } else {\\n            require(_parent == parent, \\\"ContractFee: invalid parent\\\");\\n        }\\n        return child;\\n    }\\n\\n    /**\\n     * @dev Register the contract creator.\\n     * @param parent        Root creator address\\n     * @param flags         A list of flags,\\n     *                      if the flag is true, it means `create` and load a nonce from nonces,\\n     *                      otherwise it means `create2` and load a `Create2Info` from infos\\n     * @param nonces        A list of nonces\\n     * @param infos         A list of `Create2Info`\\n     */\\n    function register(\\n        address parent,\\n        bool[] calldata flags,\\n        uint256[] calldata nonces,\\n        Create2Info[] calldata infos\\n    ) external override {\\n        require(flags.length > 0 && flags.length == nonces.length + infos.length, \\\"ContractFee: invalid input\\\");\\n        uint256 index1 = 0;\\n        uint256 index2 = 0;\\n        for (uint256 i = 0; i < flags.length; i++) {\\n            if (flags[i]) {\\n                require(index1 < nonces.length, \\\"ContractFee: out of index\\\");\\n                parent = _register(parent, _create(parent, nonces[index1++]));\\n            } else {\\n                require(index2 < infos.length, \\\"ContractFee: out of index\\\");\\n                Create2Info memory c2i = infos[index2++];\\n                parent = _register(parent, _create2(parent, c2i.salt, c2i.deployCodeHash));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Set contract fee.\\n     *      The contract fee can be set only when the sender is the creator of the contract.\\n     * @param contractAddress       Target contract address\\n     * @param fee                   Contract fee\\n     */\\n    function setFee(address contractAddress, uint256 fee) external override {\\n        // this will cause some problems, when delegate call\\n        // if (contractAddress == msg.sender) {\\n        //     require(Util.isContract(contractAddress), \\\"ContractFee: invalid sender\\\");\\n        // }\\n        address creator = creatorOf[contractAddress];\\n        while (creator != address(0) && creator != msg.sender) {\\n            creator = creatorOf[creator];\\n        }\\n        require(creator != address(0), \\\"ContractFee: invalid sender\\\");\\n        feeOf[contractAddress] = fee;\\n    }\\n}\\n\",\"keccak256\":\"0xad47d3e7b9c6a4882e98bf4598bf87e3f86daf414bde80f7d08fba95bea73077\"},\"src/interfaces/IContractFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nstruct Create2Info {\\n    bytes32 salt;\\n    bytes32 deployCodeHash;\\n}\\n\\n/**\\n * @dev see {ContractFee}\\n */\\ninterface IContractFee {\\n    function feeOf(address contractAddress) external view returns (uint256);\\n\\n    function creatorOf(address contractAddress) external view returns (address);\\n\\n    function generateAddress(address from, uint256 nonce) external pure returns (address);\\n\\n    function generateAddress2(\\n        address from,\\n        bytes32 salt,\\n        bytes32 codeHash\\n    ) external pure returns (address);\\n\\n    function register(\\n        address from,\\n        bool[] calldata flags,\\n        uint256[] calldata nonces,\\n        Create2Info[] calldata infos\\n    ) external;\\n\\n    function setFee(address contractAddress, uint256 fee) external;\\n}\\n\",\"keccak256\":\"0x53b6a4be455888699363369f585f9b2e353aac0d6d17edfff91adf2785f7389c\"},\"src/libraries/Util.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Util {\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"Util: division by zero\\\");\\n        return a % b == 0 ? a / b : a / b + 1;\\n    }\\n\\n    // check if the address is a contract\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb1a1d9603d316e567e816f0f8eb3ef5e2390f2d40011e1270c6f4edd2193f089\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ace806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063172632231461006757806325dddba41461007c57806349951d3f146100a5578063bc77a055146100c5578063dea5c2e0146100d8578063e55156b5146100eb575b600080fd5b61007a610075366004610677565b6100fe565b005b61008f61008a36600461065c565b610237565b60405161009c9190610a77565b60405180910390f35b6100b86100b336600461074d565b610249565b60405161009c9190610920565b6100b86100d3366004610781565b610283565b6100b86100e636600461065c565b6102a0565b61007a6100f9366004610781565b6102bb565b841580159061010e575082810185145b6101335760405162461bcd60e51b815260040161012a90610985565b60405180910390fd5b600080805b8781101561022b5788888281811061014c57fe5b905060200201602061016191908101906107ab565b156101b7578583106101855760405162461bcd60e51b815260040161012a9061094e565b6101b08a6101ab8c8a8a8880600101995081811061019f57fe5b90506020020135610360565b610393565b9950610223565b8382106101d65760405162461bcd60e51b815260040161012a9061094e565b6101de6105e5565b8585848060010195508181106101f057fe5b90506040020180360361020691908101906107cb565b905061021f8b6101ab8d8460000151856020015161045c565b9a50505b600101610138565b50505050505050505050565b60006020819052908152604090205481565b6000838383604051602001610260939291906108ed565b6040516020818303038152906040528051906020012060001c90505b9392505050565b600061028f8383610490565b805160209091012090505b92915050565b6001602052600090815260409020546001600160a01b031681565b6001600160a01b03808316600090815260016020526040902054165b6001600160a01b038116158015906102f857506001600160a01b0381163314155b1561031d576001600160a01b03908116600090815260016020526040902054166102d7565b6001600160a01b0381166103435760405162461bcd60e51b815260040161012a90610a40565b506001600160a01b03909116600090815260208190526040902055565b600061036c8383610283565b90506103778161052c565b61029a5760405162461bcd60e51b815260040161012a906109bc565b6001600160a01b0380821660009081526001602052604081205490911680610423576001600160a01b038381166000908152600160205260409081902080546001600160a01b03191692871692909217909155517f98ada70a1cb506dc4591465e1ee9be3fd7a2b6c73ecf3b949009718c9a351519906104169086908690610934565b60405180910390a1610454565b836001600160a01b0316816001600160a01b0316146104545760405162461bcd60e51b815260040161012a90610a09565b509092915050565b6000610469848484610249565b90506104748161052c565b61027c5760405162461bcd60e51b815260040161012a906109bc565b6060607f82116104dc57816104c657826040516020016104b091906108c0565b604051602081830303815290604052905061029a565b828260f81b6040516020016104b092919061088e565b60006104e783610532565b90508060d60160f81b848260800160f81b6105028685610557565b6040516020016105159493929190610815565b60405160208183030381529060405291505061029a565b3b151590565b60016101005b600181038311156105515760019091019060081b610538565b50919050565b60608160ff166040519080825280601f01601f191660200182016040528015610587576020820181803883390190505b50905060005b8260ff168110156105de57806001840360ff160360080260020a84816105af57fe5b0460f81b8282815181106105bf57fe5b60200101906001600160f81b031916908160001a90535060010161058d565b5092915050565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461029a57600080fd5b60008083601f840112610624578182fd5b50813567ffffffffffffffff81111561063b578182fd5b602083019150836020808302850101111561065557600080fd5b9250929050565b60006020828403121561066d578081fd5b61027c83836105fc565b60008060008060008060006080888a031215610691578283fd5b873561069c81610a80565b9650602088013567ffffffffffffffff808211156106b8578485fd5b6106c48b838c01610613565b909850965060408a01359150808211156106dc578485fd5b6106e88b838c01610613565b909650945060608a0135915080821115610700578384fd5b818a018b601f820112610711578485fd5b8035925081831115610721578485fd5b8b6020604085028301011115610735578485fd5b60208101945050508091505092959891949750929550565b600080600060608486031215610761578283fd5b833561076c81610a80565b95602085013595506040909401359392505050565b60008060408385031215610793578182fd5b61079d84846105fc565b946020939093013593505050565b6000602082840312156107bc578081fd5b8135801515811461027c578182fd5b6000604082840312156107dc578081fd5b6040516040810181811067ffffffffffffffff821117156107fb578283fd5b604052823581526020928301359281019290925250919050565b6001600160f81b03198581168252602560fa1b6001830152606085901b6001600160601b0319166002830152831660168201528151600090815b8181101561086c576020818601810151601786840101520161084f565b8181111561087d5782601783860101525b509190910160170195945050505050565b6135a560f21b815260609290921b6001600160601b03191660028301526001600160f81b031916601682015260170190565b6135a560f21b815260609190911b6001600160601b0319166002820152600160ff1b601682015260170190565b6001600160f81b0319815260609390931b6001600160601b03191660018401526015830191909152603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60208082526019908201527f436f6e74726163744665653a206f7574206f6620696e64657800000000000000604082015260600190565b6020808252601a908201527f436f6e74726163744665653a20696e76616c696420696e707574000000000000604082015260600190565b6020808252602d908201527f436f6e74726163744665653a206372656174696f6e20636f6e7472616374206460408201526c1bd95cc81b9bdd08195e1a5cdd609a1b606082015260800190565b6020808252601b908201527f436f6e74726163744665653a20696e76616c696420706172656e740000000000604082015260600190565b6020808252601b908201527f436f6e74726163744665653a20696e76616c69642073656e6465720000000000604082015260600190565b90815260200190565b6001600160a01b0381168114610a9557600080fd5b5056fea2646970667358221220cb9d29c95b0d81016336f63d42385a492ade1f717b2665c57e0f484aba51b01e64736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063172632231461006757806325dddba41461007c57806349951d3f146100a5578063bc77a055146100c5578063dea5c2e0146100d8578063e55156b5146100eb575b600080fd5b61007a610075366004610677565b6100fe565b005b61008f61008a36600461065c565b610237565b60405161009c9190610a77565b60405180910390f35b6100b86100b336600461074d565b610249565b60405161009c9190610920565b6100b86100d3366004610781565b610283565b6100b86100e636600461065c565b6102a0565b61007a6100f9366004610781565b6102bb565b841580159061010e575082810185145b6101335760405162461bcd60e51b815260040161012a90610985565b60405180910390fd5b600080805b8781101561022b5788888281811061014c57fe5b905060200201602061016191908101906107ab565b156101b7578583106101855760405162461bcd60e51b815260040161012a9061094e565b6101b08a6101ab8c8a8a8880600101995081811061019f57fe5b90506020020135610360565b610393565b9950610223565b8382106101d65760405162461bcd60e51b815260040161012a9061094e565b6101de6105e5565b8585848060010195508181106101f057fe5b90506040020180360361020691908101906107cb565b905061021f8b6101ab8d8460000151856020015161045c565b9a50505b600101610138565b50505050505050505050565b60006020819052908152604090205481565b6000838383604051602001610260939291906108ed565b6040516020818303038152906040528051906020012060001c90505b9392505050565b600061028f8383610490565b805160209091012090505b92915050565b6001602052600090815260409020546001600160a01b031681565b6001600160a01b03808316600090815260016020526040902054165b6001600160a01b038116158015906102f857506001600160a01b0381163314155b1561031d576001600160a01b03908116600090815260016020526040902054166102d7565b6001600160a01b0381166103435760405162461bcd60e51b815260040161012a90610a40565b506001600160a01b03909116600090815260208190526040902055565b600061036c8383610283565b90506103778161052c565b61029a5760405162461bcd60e51b815260040161012a906109bc565b6001600160a01b0380821660009081526001602052604081205490911680610423576001600160a01b038381166000908152600160205260409081902080546001600160a01b03191692871692909217909155517f98ada70a1cb506dc4591465e1ee9be3fd7a2b6c73ecf3b949009718c9a351519906104169086908690610934565b60405180910390a1610454565b836001600160a01b0316816001600160a01b0316146104545760405162461bcd60e51b815260040161012a90610a09565b509092915050565b6000610469848484610249565b90506104748161052c565b61027c5760405162461bcd60e51b815260040161012a906109bc565b6060607f82116104dc57816104c657826040516020016104b091906108c0565b604051602081830303815290604052905061029a565b828260f81b6040516020016104b092919061088e565b60006104e783610532565b90508060d60160f81b848260800160f81b6105028685610557565b6040516020016105159493929190610815565b60405160208183030381529060405291505061029a565b3b151590565b60016101005b600181038311156105515760019091019060081b610538565b50919050565b60608160ff166040519080825280601f01601f191660200182016040528015610587576020820181803883390190505b50905060005b8260ff168110156105de57806001840360ff160360080260020a84816105af57fe5b0460f81b8282815181106105bf57fe5b60200101906001600160f81b031916908160001a90535060010161058d565b5092915050565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461029a57600080fd5b60008083601f840112610624578182fd5b50813567ffffffffffffffff81111561063b578182fd5b602083019150836020808302850101111561065557600080fd5b9250929050565b60006020828403121561066d578081fd5b61027c83836105fc565b60008060008060008060006080888a031215610691578283fd5b873561069c81610a80565b9650602088013567ffffffffffffffff808211156106b8578485fd5b6106c48b838c01610613565b909850965060408a01359150808211156106dc578485fd5b6106e88b838c01610613565b909650945060608a0135915080821115610700578384fd5b818a018b601f820112610711578485fd5b8035925081831115610721578485fd5b8b6020604085028301011115610735578485fd5b60208101945050508091505092959891949750929550565b600080600060608486031215610761578283fd5b833561076c81610a80565b95602085013595506040909401359392505050565b60008060408385031215610793578182fd5b61079d84846105fc565b946020939093013593505050565b6000602082840312156107bc578081fd5b8135801515811461027c578182fd5b6000604082840312156107dc578081fd5b6040516040810181811067ffffffffffffffff821117156107fb578283fd5b604052823581526020928301359281019290925250919050565b6001600160f81b03198581168252602560fa1b6001830152606085901b6001600160601b0319166002830152831660168201528151600090815b8181101561086c576020818601810151601786840101520161084f565b8181111561087d5782601783860101525b509190910160170195945050505050565b6135a560f21b815260609290921b6001600160601b03191660028301526001600160f81b031916601682015260170190565b6135a560f21b815260609190911b6001600160601b0319166002820152600160ff1b601682015260170190565b6001600160f81b0319815260609390931b6001600160601b03191660018401526015830191909152603582015260550190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b60208082526019908201527f436f6e74726163744665653a206f7574206f6620696e64657800000000000000604082015260600190565b6020808252601a908201527f436f6e74726163744665653a20696e76616c696420696e707574000000000000604082015260600190565b6020808252602d908201527f436f6e74726163744665653a206372656174696f6e20636f6e7472616374206460408201526c1bd95cc81b9bdd08195e1a5cdd609a1b606082015260800190565b6020808252601b908201527f436f6e74726163744665653a20696e76616c696420706172656e740000000000604082015260600190565b6020808252601b908201527f436f6e74726163744665653a20696e76616c69642073656e6465720000000000604082015260600190565b90815260200190565b6001600160a01b0381168114610a9557600080fd5b5056fea2646970667358221220cb9d29c95b0d81016336f63d42385a492ade1f717b2665c57e0f484aba51b01e64736f6c63430006020033",
  "devdoc": {
    "methods": {
      "generateAddress(address,uint256)": {
        "details": "Generate contract address.",
        "params": {
          "from": "Creator address",
          "nonce": "Creator nonce"
        }
      },
      "generateAddress2(address,bytes32,bytes32)": {
        "details": "Generate contract address(create2).",
        "params": {
          "codeHash": "Deploy code hash, notice: this is not the same as the account code hash",
          "from": "Creator address",
          "salt": "Salt"
        }
      },
      "register(address,bool[],uint256[],(bytes32,bytes32)[])": {
        "details": "Register the contract creator.",
        "params": {
          "flags": "A list of flags,                     if the flag is true, it means `create` and load a nonce from nonces,                     otherwise it means `create2` and load a `Create2Info` from infos",
          "infos": "A list of `Create2Info`",
          "nonces": "A list of nonces",
          "parent": "Root creator address"
        }
      },
      "setFee(address,uint256)": {
        "details": "Set contract fee.     The contract fee can be set only when the sender is the creator of the contract.",
        "params": {
          "contractAddress": "Target contract address",
          "fee": "Contract fee"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1977,
        "contract": "src/ContractFee.sol:ContractFee",
        "label": "feeOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1982,
        "contract": "src/ContractFee.sol:ContractFee",
        "label": "creatorOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}